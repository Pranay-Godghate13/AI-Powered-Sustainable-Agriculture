from phi.agent import Agent, RunResponse
from phi.model.ollama import Ollama
from FarmerAdvisor import FarmerAdvisor
from MarketResearcher import MarketResearcher
from pydantic import BaseModel, Field
from typing import List
from typing import Iterator

class Coordinator:

    def run(self, question):
            
        farmer_advisor_agent = FarmerAdvisor()
        market_researcher_agent = MarketResearcher()

        full_data = {"farmer_advisor": farmer_advisor_agent, "market_researcher": market_researcher_agent}

        class CoordinatorSchema(BaseModel):
            ranking: List[str] = Field(description="Ranking suggested by agent.")
            justification: str = Field(description="The justification for the ranking")

        coordinator_agent=Agent(
            name="Coordinator Agent",
            model=Ollama(id="phi3"),
            team=[farmer_advisor_agent,market_researcher_agent],
            description="You are a coordinator with 30+ years of experience that takes input from farmer advisor agent and market advisor agent and give actionable insights",
            instructions=[
                "Understand the output given by both farmer advisor agent and market researcher agent",
                "Rank the data given by both agents making sure data given by farmer agent and market researcher agent follows rule that less water used, least chemicals used and maximum profit generated by the crop"
                "Once the analysis is done, rank all the crop types [Wheat,Rice,Corn,Soybean] along with a justification.",
            ],
            markdown=True,
            show_tool_calls=True,
            response_model=CoordinatorSchema,structured_outputs=True
        )

        question = f"I am a coordinator who take data from farmer advisor agent, and market researcher agent.Give me best possible output after analysing data from farmer advisor agent & market researcher agent and rank the crop in order with justification."
        
        coordinator: Iterator[RunResponse] = coordinator_agent.run(question)
        return coordinator


